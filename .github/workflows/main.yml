name: main

# Controls when the action will run.
on:
  release:
    # A release, pre-release, or draft of a release is published.
    types: [ published ]
  # Allows you to run this workflow manually from the Actions tab.
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel.
jobs:
  # The introduction just shows some useful informations.
  intro:
    # The type of runner that the job will run on.
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job.
    steps:
    - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
    - run: echo "The name of the branch is ${{ github.ref }} and the repository is ${{ github.repository }}."

  # Build all targets
  build:
    # The type of runner that the job will run on.
    runs-on: ubuntu-latest
    needs: intro
    strategy:
      matrix:
        environment:
          - adafruit_feather_esp32_v2-factory
          #- adafruit_matrixportal_s3-factory
          - az-delivery-devkit-v4-factory
          - esp32doit-devkit-v1-factory
          - esp32-s3-devkitc-1-n16r8v-factory
          - esp32-nodemcu-factory
          - lilygo-ttgo-t-display-factory
          - lilygo-t-display-s3-factory
          #- m5stack_core-factory
          - ulanzi-tc001-factory
          - wemos_lolin_s2_mini-factory
          
    # Steps represent a sequence of tasks that will be executed as part of the job.
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Cache pip
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Cache PlatformIO
      uses: actions/cache@v4
      with:
        path: ~/.platformio
        key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install PlatformIO
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade platformio

    - name: Create release artifcats folder
      if: github.ref_type == 'tag' && startsWith(github.ref_name, 'v')
      run: |
        mkdir ${{ github.workspace }}/artifacts

    - name: Compile ${{ matrix.environment }} firmware
      run: platformio run --environment ${{ matrix.environment }}

    - name: Deploy ${{ matrix.environment }}
      if: github.ref_type == 'tag' && startsWith(github.ref_name, 'v')
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.environment }}
        path: |
          ${{ github.workspace }}/.pio/build/${{ matrix.environment }}/${{ matrix.environment }}.bin
        retention-days: 5

  # Perform static checks
  check:
    # The type of runner that the job will run on.
    runs-on: ubuntu-latest
    needs: intro
    strategy:
      matrix:
        environment:
          - adafruit_feather_esp32_v2-factory
          #- adafruit_matrixportal_s3-factory
          - az-delivery-devkit-v4-factory
          - esp32doit-devkit-v1-factory
          - esp32-s3-devkitc-1-n16r8v-factory
          - esp32-nodemcu-factory
          - lilygo-ttgo-t-display-factory
          - lilygo-t-display-s3-factory
          #- m5stack_core-factory
          - ulanzi-tc001-factory
          - wemos_lolin_s2_mini-factory

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Cache pip
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Cache PlatformIO
      uses: actions/cache@v4
      with:
        path: ~/.platformio
        key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install PlatformIO
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade platformio

    - name: Perform static checks on ${{ matrix.environment }}
      run: platformio check --environment ${{ matrix.environment }} --fail-on-defect=medium --fail-on-defect=high

  # Build documentation
  doc:
    # The type of runner that the job will run on.
    runs-on: ubuntu-latest
    needs: intro
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Cache pip
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Cache PlatformIO
      uses: actions/cache@v4
      with:
        path: ~/.platformio
        key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
  
    - name: Install PlatformIO
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade platformio

    - name: Set up graphviz
      uses: ts-graphviz/setup-graphviz@v2

    - name: Set up doxygen and generate documentation
      uses: mattnotmitt/doxygen-action@v1.12.0
      with:
        working-directory: './doc/doxygen'
        doxyfile-path: './Doxyfile'

    - name: Print doxygen warnings
      if: ${{ failure() }}
      run: cat ./doc/doxygen/doxygen_warnings.txt

  # Deploy release artifacts
  deploy:
    if: github.ref_type == 'tag' && startsWith(github.ref_name, 'v')
    # The type of runner that the job will run on.
    runs-on: ubuntu-latest
    needs: [build, check, doc]
    steps:
    - name: Deploy release artifacts
      uses: actions/download-artifact@v4
      with:
        path: ${{ github.workspace }}/artifacts

    - name: Display structure of release artifacts
      run: ls -R
      working-directory: ${{ github.workspace }}/artifacts

    - name: Zip release artifacts folder
      run: zip -rj ${{ github.event.repository.name }}-${{ github.event.release.tag_name }}.zip .
      working-directory: ${{ github.workspace }}/artifacts

    - name: Release
      uses: softprops/action-gh-release@v1
      with:
        files: ${{ github.workspace }}/artifacts/${{ github.event.repository.name }}-${{ github.event.release.tag_name }}.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
